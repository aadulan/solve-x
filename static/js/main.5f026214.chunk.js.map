{"version":3,"sources":["inital-data.js","task.jsx","column.jsx","serviceWorker.js","index.js"],"names":["equationGen","randomNumber","Math","ceil","random","square","randomInput","input","EqCard","props","draggableId","task","id","index","isDragDisabled","provided","snapshot","Card","style","border","borderStyle","padding","margin","width","draggableProps","dragHandleProps","innerRef","CardContent","Typography","color","align","variant","userSelect","content","EquationSpace","useState","dragDisabled","setDragDisabled","useEffect","displayExpression","expression","side","length","maxWidth","borderWidth","backgroundColor","droppableId","dropId","direction","Grid","container","item","justify","alignItems","droppableProps","display","flexDirection","map","key","placeholder","Boolean","window","location","hostname","match","tasks","terms","forEach","t","push","variables","variable","coefficients","numer","exp","constants","c","ReactDOM","render","algebra","parse","equation","setEquation","onDragEnd","result","document","body","destination","source","newLhsCards","lhs","newRhsCards","rhs","movedTask","newLhs","subtract","newRhs","newExp","Equation","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5f026214.chunk.js","sourcesContent":["const initalData = {\n    equation : '2 * x - 5 = 5',\n    // tasks: [\n    //     { id: 'task-2', content: '2 * x' },\n    //     { id: 'task-4', content: '- 5' },\n    //     { id: 'task-5', content: '=' },\n    //     { id: 'task-6', content: '5' },\n    // ],\n};\n\nexport default initalData;\n\nexport const equationGen = () => {\n    const randomNumber = Math.ceil(Math.random() * 10) \n    const square = randomNumber * randomNumber\n    const randomInput = Math.ceil(Math.random() * 10)\n    const input = square - randomInput\n\n    return `${randomNumber} * x -${input} = ${randomInput}`\n\n}\n\n","import React from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent'\nimport { Typography } from '@material-ui/core';\nimport { Draggable } from 'react-beautiful-dnd';\n\n// props.isDragging ? 'lightgreen : 'white'\n\n//isDragDisabled to allow to conditionally move items \n\nexport default function EqCard(props) {\n\n    return (\n        <Draggable\n            draggableId={props.task.id}\n            index={props.index}\n            isDragDisabled={props.isDragDisabled}\n        >\n            {(provided, snapshot) => (\n\n\n                <Card style={{ border: '1px', borderStyle: 'solid', padding: '10px', margin: 10, width: '300px' }}\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                    innerRef={provided.innerRef}\n                    // isDragging={snapshot.isDragging}\n                >\n                    <CardContent>\n                        <Typography color='primary' align='center' variant='h1' style={{userSelect:'none'}} >\n                            {props.task.content}\n                        </Typography>\n\n                    </CardContent>\n                </Card>\n\n            )}\n\n        </Draggable>\n\n    )\n}","import React, { useState, useEffect } from 'react';\nimport Card from '@material-ui/core/Card';\nimport { Grid } from '@material-ui/core';\nimport EqCard from './task'\nimport { Droppable } from 'react-beautiful-dnd';\nimport { displayExpression } from './index.js'\n//list of components transition : background colour 0.2 sease\n// props.isDragging ? 'lightgreen : 'white'\n\nexport default function EquationSpace(props) {\n\n    const [dragDisabled, setDragDisabled] = useState(false)\n\n    useEffect(() => {\n        setDragDisabled(displayExpression(props.expression, props.side).length === 1)\n    }, [props.expression, props.side])\n\n    return (\n        <Card style={{ padding: '20px', maxWidth: '1000px', borderStyle: 'solid', borderWidth: '1px', backgroundColor: '#e3f2fd'}}>\n            <Droppable\n                droppableId={props.dropId}\n                direction=\"horizontal\"\n\n            >\n                {(provided, snapshot) => (\n                    <Grid\n                        direction=\"row\"\n                        container\n                        item\n                        justify=\"center\"\n                        alignItems=\"center\"\n                        innerRef={provided.innerRef}\n                        {...provided.droppableProps}\n                        // isDraggingOver={snapshot.isDraggingOver}\n                        style={{\n                            display: 'flex',\n                            flexDirection: 'row',\n                        }}\n                    >\n                        {displayExpression(props.expression, props.side).map((task, index) => (\n                            <EqCard key={task.id} task={task} index={index} {...props} isDragDisabled={dragDisabled} />\n                        ))}\n                        {provided.placeholder}\n                    </Grid>\n                )}\n\n            </Droppable>\n        </Card>\n\n    )\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { equationGen } from './inital-data'\nimport EquationSpace from './column'\nimport * as serviceWorker from './serviceWorker';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { Typography } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport algebra from 'algebra.js'\n\nexport const displayExpression = (expression, side) => {\n    var tasks = []\n    \n    expression.terms.forEach(t => {\n        tasks.push({\n            id: `${side}-variable-${t.variables[0].variable}`, \n            content: t.coefficients[0].numer + t.variables[0].variable, \n            exp: t \n        });            \n    }); \n    // const [c] = expression.constants\n    // if(c){\n        //     tasks.push({id: `${props.side}-num-${c.numer}`, content: c.numer});\n        // }\n        \n        expression.constants.forEach(c => {\n            tasks.push({id: `${side}-num-${c.numer}`, content:c.numer, exp: c});            \n        }); \n\n        return tasks;\n        \n    }\n\n\nfunction App(props) {\n    \n    // const [data, setData] = useState(equationGen());\n    const [equation, setEquation] = useState(algebra.parse(equationGen()));\n    // const [lhsDrag, setLhsDrag] = useState(false);\n    // const [rhsDrag, setRhsDrag] = useState(false);\n\n    // onDragStart = () => {\n        //     document.body.style.color = 'blue';\n        //     document.body.style.transition = 'background-color 0.2s ease'\n        // }\n        \n        // onDragUpdate = update => {\n            //     const { destination } = update;\n            //     const opacity = destination ? destination.index / Object.keys(this.state.tasks).length : 0 ;\n            //     document.body.style.backgroundColor = `rgba(153, 141, 217, ${opacity})`;\n            // }\n            \n            \n\n    const onDragEnd = result => {\n        document.body.style.color = 'inherit';\n        document.body.style.backgroundColor = 'inherit';\n        const { destination, source } = result;\n\n        if (!destination) {\n            return;\n        }\n        if (destination.droppableId === source.droppableId && destination.index === source.index) {\n            return;\n        }\n        const newLhsCards = displayExpression(equation.lhs, 'lhs');\n        const newRhsCards = displayExpression(equation.rhs, 'rhs');\n\n        if(destination.droppableId !== source.droppableId){\n            var movedTask = '';\n            if(destination.droppableId === 'eqspace-rhs'){\n                movedTask = newLhsCards[source.index]\n            }else {\n                movedTask = newRhsCards[source.index]\n            }\n            const newLhs = equation.lhs.subtract(movedTask.exp)\n            const newRhs = equation.rhs.subtract(movedTask.exp)\n            var newExp = new algebra.Equation(newLhs, newRhs) \n            setEquation(newExp)\n        \n        }\n    }\n\n\n    return (\n        <Grid container\n            direction=\"row\"\n            justify=\"center\"\n            alignItems=\"center\"\n        >\n            <DragDropContext\n                onDragEnd={onDragEnd}\n            // onDragStart={this.onDragStart}\n            // onDragUpdate={this.onDragUpdate}\n            >\n                    <EquationSpace\n                        dropId={'eqspace-lhs'}\n                        expression={equation.lhs}\n                        side={'lhs'}\n                        />\n                        <Typography style={{margin: 10}} variant='h1'>\n                            =\n                        </Typography>\n                    <EquationSpace\n                        dropId={'eqspace-rhs'}\n                        expression={equation.rhs}\n                        side={'rhs'}\n                        />\n            </DragDropContext>\n        </Grid>\n\n\n    );\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}