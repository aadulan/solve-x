{"version":3,"sources":["serviceWorker.js","inital-data.js","Styles.js","EqCard.jsx","DisplayExpression.js","EqSpace.jsx","Equal.jsx","EqDisplay.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","equationGen","randomNumber","Math","ceil","random","square","randomInput","input","useStyles","makeStyles","card","border","borderStyle","padding","margin","minwidth","userSelect","eqSpaceCard","maxWidth","borderWidth","backgroundColor","drop","display","flexDirection","equal","borderRadius","width","height","fontFamily","EqCard","props","classes","draggableId","task","id","index","isDragDisabled","provided","snapshot","Card","className","draggableProps","dragHandleProps","innerRef","CardContent","Typography","color","align","variant","content","displayExpression","expression","side","tasks","terms","forEach","t","push","variables","variable","coefficients","numer","exp","constants","c","EquationSpace","useState","dragDisabled","setDragDisabled","useEffect","length","droppableId","dropId","direction","Grid","container","item","justify","alignItems","droppableProps","map","key","placeholder","Equal","style","EqDisplay","algebra","parse","equation","setEquation","onDragEnd","result","document","body","destination","source","newLhsCards","lhs","newRhsCards","rhs","movedTask","newLhs","subtract","newRhs","newExp","Equation","ReactDOM","render","exact","path","component","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BCNOC,EAAc,WACvB,IAAMC,EAAeC,KAAKC,KAAqB,GAAhBD,KAAKE,UAC9BC,EAASJ,EAAeA,EACxBK,EAAcJ,KAAKC,KAAqB,GAAhBD,KAAKE,UAC7BG,EAAQF,EAASC,EAEvB,MAAM,GAAN,OAAUL,EAAV,iBAA+BM,EAA/B,cAA0CD,I,qDChBjCE,EAAYC,YAAW,CAChCC,KAAM,CACFC,OAAQ,EACRC,YAAa,QACbC,QAAS,GACTC,OAAQ,GACRC,SAAU,KAEdC,WAAY,CACRA,WAAW,QAEfC,YAAa,CACTJ,QAAS,GACTK,SAAU,IACVN,YAAa,QACbO,YAAa,EACbC,gBAAiB,WAErBC,KAAM,CACFC,QAAS,OACTC,cAAe,OAEnBC,MAAO,CACHC,aAAc,OACdX,OAAQ,SACRY,MAAO,IACPC,OAAQ,IACRC,WAAY,cACZN,QAAS,UCnBF,SAASO,EAAOC,GAC3B,IAAMC,EAAUvB,IAEhB,OACI,kBAAC,IAAD,CACIwB,YAAaF,EAAMG,KAAKC,GACxBC,MAAOL,EAAMK,MACbC,eAAgBN,EAAMM,iBAErB,SAACC,EAAUC,GAAX,OAGG,kBAACC,EAAA,EAAD,eACIC,UAAWT,EAAQrB,MACf2B,EAASI,eACTJ,EAASK,gBAHjB,CAIIC,SAAUN,EAASM,WAGnB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIL,UAAWT,EAAQf,WACnB8B,MAAM,UACNC,MAAM,SACNC,QAAQ,MACPlB,EAAMG,KAAKgB,cCpCjC,IAAMC,EAAoB,SAACC,EAAYC,GAC1C,IAAIC,EAAQ,GAaR,OAXJF,EAAWG,MAAMC,SAAQ,SAAAC,GACrBH,EAAMI,KAAK,CACPvB,GAAG,GAAD,OAAKkB,EAAL,qBAAsBI,EAAEE,UAAU,GAAGC,UACvCV,QAASO,EAAEI,aAAa,GAAGC,MAAQL,EAAEE,UAAU,GAAGC,SAClDG,IAAKN,OAGTL,EAAWY,UAAUR,SAAQ,SAAAS,GACzBX,EAAMI,KAAK,CAACvB,GAAG,GAAD,OAAKkB,EAAL,gBAAiBY,EAAEH,OAASZ,QAAQe,EAAEH,MAAOC,IAAKE,OAG7DX,GCJA,SAASY,EAAcnC,GAAQ,IAAD,EAEDoC,oBAAS,GAFR,mBAElCC,EAFkC,KAEpBC,EAFoB,KAInCrC,EAAUvB,IAMhB,OAJA6D,qBAAU,WACND,EAA2E,IAA3DlB,EAAkBpB,EAAMqB,WAAYrB,EAAMsB,MAAMkB,UACjE,CAACxC,EAAMqB,WAAYrB,EAAMsB,OAGxB,kBAACb,EAAA,EAAD,CACAC,UAAWT,EAAQd,aAEf,kBAAC,IAAD,CACIsD,YAAazC,EAAM0C,OACnBC,UAAU,eAGT,SAACpC,EAAUC,GAAX,OACG,kBAACoC,EAAA,EAAD,eACIlC,UAAWT,EAAQV,KACnBoD,UAAU,MACVE,WAAS,EACTC,MAAI,EACJC,QAAQ,SACRC,WAAW,SACXnC,SAAUN,EAASM,UACfN,EAAS0C,gBAGZ7B,EAAkBpB,EAAMqB,WAAYrB,EAAMsB,MAAM4B,KAAI,SAAC/C,EAAME,GAAP,OACjD,kBAACN,EAAD,eACIoD,IAAKhD,EAAKC,GACVD,KAAMA,EACNE,MAAOA,GACHL,EAJR,CAKIM,eAAgB+B,QAGvB9B,EAAS6C,iB,qBC5CnB,SAASC,EAAMrD,GAE1B,IAAMC,EAAUvB,IAGhB,OACI,kBAACqC,EAAA,EAAD,CAAYL,UAAWT,EAAQf,WAAYgC,QAAQ,MAC/C,kBAACT,EAAA,EAAD,CAAMC,UAAWT,EAAQP,OACrB,0BAAM4D,MAAO,CAAEtE,OAAQ,SAAvB,OCJD,SAASuE,EAAUvD,GAAO,IAAD,EACJoC,mBAASoB,IAAQC,MAAMvF,MADnB,mBAC7BwF,EAD6B,KACnBC,EADmB,KA4CtC,OACI,kBAACf,EAAA,EAAD,CAAMC,WAAS,EACXF,UAAU,MACVI,QAAQ,SACRC,WAAW,UAEX,kBAAC,IAAD,CACIY,UArCM,SAAAC,GACdC,SAASC,KAAKT,MAAMtC,MAAQ,UAC5B8C,SAASC,KAAKT,MAAMhE,gBAAkB,UAFd,IAGhB0E,EAAwBH,EAAxBG,YAAaC,EAAWJ,EAAXI,OAErB,GAAKD,IAGDA,EAAYvB,cAAgBwB,EAAOxB,aAAeuB,EAAY3D,QAAU4D,EAAO5D,OAAnF,CAGA,IAAM6D,EAAc9C,EAAkBsC,EAASS,IAAK,OAC9CC,EAAchD,EAAkBsC,EAASW,IAAK,OAEpD,GAAGL,EAAYvB,cAAgBwB,EAAOxB,YAAY,CAC9C,IAAI6B,EAAY,GAEZA,EAD2B,gBAA5BN,EAAYvB,YACCyB,EAAYD,EAAO5D,OAEnB+D,EAAYH,EAAO5D,OAEnC,IAAMkE,EAASb,EAASS,IAAIK,SAASF,EAAUtC,KACzCyC,EAASf,EAASW,IAAIG,SAASF,EAAUtC,KAC3C0C,EAAS,IAAIlB,IAAQmB,SAASJ,EAAQE,GAC1Cd,EAAYe,OAiBJ,kBAACvC,EAAD,CACIO,OAAQ,cACRrB,WAAYqC,EAASS,IACrB7C,KAAM,QAEN,kBAAC+B,EAAD,MAIJ,kBAAClB,EAAD,CACIO,OAAQ,cACRrB,WAAYqC,EAASW,IACrB/C,KAAM,UCvE5BsD,IAASC,OAAO,mBCAD,SAAa7E,GAE1B,OACE,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO8E,OAAK,EAACC,KAAK,IAAIC,UAAWzB,ODJzB,MAASO,SAASmB,eAAe,SR2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.08c3567a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initalData = {\n    equation : '2 * x - 5 = 5',\n    // tasks: [\n    //     { id: 'task-2', content: '2 * x' },\n    //     { id: 'task-4', content: '- 5' },\n    //     { id: 'task-5', content: '=' },\n    //     { id: 'task-6', content: '5' },\n    // ],\n};\n\nexport default initalData;\n\nexport const equationGen = () => {\n    const randomNumber = Math.ceil(Math.random() * 10) \n    const square = randomNumber * randomNumber\n    const randomInput = Math.ceil(Math.random() * 10)\n    const input = square - randomInput\n\n    return `${randomNumber} * x -${input} = ${randomInput}`\n\n}\n\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles({\n    card: {\n        border: 1, \n        borderStyle: 'solid', \n        padding: 10, \n        margin: 10, \n        minwidth: 200,\n    },\n    userSelect: {\n        userSelect:'none'\n    },\n    eqSpaceCard: {\n        padding: 20, \n        maxWidth: 1000, \n        borderStyle: 'solid', \n        borderWidth: 1, \n        backgroundColor: '#e3f2fd',\n    },\n    drop: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    equal: {\n        borderRadius: '50em',\n        margin: '0.25em',\n        width: 100, \n        height: 100,\n        fontFamily: '\"Fira Code\"',\n        display: 'flex',\n    }\n\n})","import React from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent'\nimport { Typography } from '@material-ui/core';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { useStyles } from './Styles'\n\n// props.isDragging ? 'lightgreen : 'white'\n\n//isDragDisabled to allow to conditionally move items \n\nexport default function EqCard(props) {\n    const classes = useStyles();\n\n    return (\n        <Draggable\n            draggableId={props.task.id}\n            index={props.index}\n            isDragDisabled={props.isDragDisabled}\n        >\n            {(provided, snapshot) => (\n\n\n                <Card\n                    className={classes.card}\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                    innerRef={provided.innerRef}\n                    // isDragging={snapshot.isDragging}\n                >\n                    <CardContent>\n                        <Typography \n                            className={classes.userSelect} \n                            color='primary' \n                            align='center' \n                            variant='h1'>\n                            {props.task.content}\n                        </Typography>\n\n                    </CardContent>\n                </Card>\n\n            )}\n\n        </Draggable>\n\n    )\n}","export const displayExpression = (expression, side) => {\n    var tasks = []\n    \n    expression.terms.forEach(t => {\n        tasks.push({\n            id: `${side}-variable-${t.variables[0].variable}`, \n            content: t.coefficients[0].numer + t.variables[0].variable, \n            exp: t \n        });            \n    }); \n        expression.constants.forEach(c => {\n            tasks.push({id: `${side}-num-${c.numer}`, content:c.numer, exp: c});            \n        }); \n\n        return tasks;\n        \n    }","import React, { useState, useEffect } from 'react';\nimport Card from '@material-ui/core/Card';\nimport { Grid } from '@material-ui/core';\nimport EqCard from './EqCard'\nimport { Droppable } from 'react-beautiful-dnd';\nimport { displayExpression } from './DisplayExpression'\nimport { useStyles } from './Styles'\n//list of components transition : background colour 0.2 sease\n// props.isDragging ? 'lightgreen : 'white'\n\nexport default function EquationSpace(props) {\n\n    const [dragDisabled, setDragDisabled] = useState(false)\n\n    const classes = useStyles();\n\n    useEffect(() => {\n        setDragDisabled(displayExpression(props.expression, props.side).length === 1)\n    }, [props.expression, props.side])\n\n    return (\n        <Card \n        className={classes.eqSpaceCard}\n        >\n            <Droppable\n                droppableId={props.dropId}\n                direction=\"horizontal\"\n\n            >\n                {(provided, snapshot) => (\n                    <Grid\n                        className={classes.drop}\n                        direction=\"row\"\n                        container\n                        item\n                        justify=\"center\"\n                        alignItems=\"center\"\n                        innerRef={provided.innerRef}\n                        {...provided.droppableProps}\n                        // isDraggingOver={snapshot.isDraggingOver}\n                    >\n                        {displayExpression(props.expression, props.side).map((task, index) => (\n                            <EqCard \n                                key={task.id} \n                                task={task} \n                                index={index} \n                                {...props} \n                                isDragDisabled={dragDisabled} \n                            />\n                        ))}\n                        {provided.placeholder}\n                    </Grid>\n                )}\n\n            </Droppable>\n        </Card>\n\n    )\n\n}\n","import React from 'react';\nimport { Typography } from '@material-ui/core';\nimport { useStyles } from './Styles'\nimport Card from '@material-ui/core/Card';\n// import MathJax from 'react-mathjax'\n\nexport default function Equal(props){\n    \n    const classes = useStyles();\n    // const tex = `=`\n\n    return(\n        <Typography className={classes.userSelect} variant='h1'>\n            <Card className={classes.equal}>\n                <span style={{ margin: 'auto' }}>=</span>\n            {/* <MathJax.Provider>\n                <MathJax.Node formula={'='}/>\n            </MathJax.Provider> */}\n            </Card>\n        </Typography>\n\n    )\n}","import React, { useState } from 'react';\nimport './index.css';\nimport { equationGen } from './inital-data'\nimport EquationSpace from './EqSpace'\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport Grid from '@material-ui/core/Grid';\nimport algebra from 'algebra.js'\nimport { displayExpression } from './DisplayExpression'\nimport Equal from './Equal'\n\nexport default function EqDisplay(props){\n    const [equation, setEquation] = useState(algebra.parse(equationGen()));\n\n  // onDragStart = () => {\n      //     document.body.style.color = 'blue';\n      //     document.body.style.transition = 'background-color 0.2s ease'\n      // }\n      \n      // onDragUpdate = update => {\n          //     const { destination } = update;\n          //     const opacity = destination ? destination.index / Object.keys(this.state.tasks).length : 0 ;\n          //     document.body.style.backgroundColor = `rgba(153, 141, 217, ${opacity})`;\n          // }\n          \n  const onDragEnd = result => {\n      document.body.style.color = 'inherit';\n      document.body.style.backgroundColor = 'inherit';\n      const { destination, source } = result;\n\n      if (!destination) {\n          return;\n      }\n      if (destination.droppableId === source.droppableId && destination.index === source.index) {\n          return;\n      }\n      const newLhsCards = displayExpression(equation.lhs, 'lhs');\n      const newRhsCards = displayExpression(equation.rhs, 'rhs');\n\n      if(destination.droppableId !== source.droppableId){\n          var movedTask = '';\n          if(destination.droppableId === 'eqspace-rhs'){\n              movedTask = newLhsCards[source.index]\n          }else {\n              movedTask = newRhsCards[source.index]\n          }\n          const newLhs = equation.lhs.subtract(movedTask.exp)\n          const newRhs = equation.rhs.subtract(movedTask.exp)\n          var newExp = new algebra.Equation(newLhs, newRhs) \n          setEquation(newExp)\n      \n      }\n  }\n\n\n  return (\n      <Grid container\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"center\"\n      >\n          <DragDropContext\n              onDragEnd={onDragEnd}\n          // onDragStart={this.onDragStart}\n          // onDragUpdate={this.onDragUpdate}\n          >\n                  <EquationSpace\n                      dropId={'eqspace-lhs'}\n                      expression={equation.lhs}\n                      side={'lhs'}\n                      />\n                      <Equal/>\n                      {/* <Typography style={{margin: 10}} variant='h1'>\n                          =\n                      </Typography> */}\n                  <EquationSpace\n                      dropId={'eqspace-rhs'}\n                      expression={equation.rhs}\n                      side={'rhs'}\n                      />\n          </DragDropContext>\n      </Grid>\n\n);\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport './index.css';\nimport EqDisplay from './EqDisplay';\n\n\nexport default function App(props) {\n\n  return (\n    <Router>\n        <Route exact path=\"/\" component={EqDisplay} />\n    </Router>\n  )\n\n}"],"sourceRoot":""}